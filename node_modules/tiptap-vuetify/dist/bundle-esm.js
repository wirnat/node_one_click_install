import Vue from 'vue';
import { Editor, EditorMenuBar, EditorMenuBubble, EditorContent } from 'tiptap';
import { Link as Link$1, Placeholder, Heading as Heading$1, Bold as Bold$1, Italic as Italic$1, Strike as Strike$1, Underline as Underline$1, Code as Code$1, CodeBlock as CodeBlock$1, BulletList as BulletList$1, OrderedList as OrderedList$1, ListItem as ListItem$1, Blockquote as Blockquote$1, HardBreak as HardBreak$1, HorizontalRule as HorizontalRule$1, History as History$1 } from 'tiptap-extensions';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/**
  * vue-class-component v7.1.0
  * (c) 2015-present Evan You
  * @license MIT
  */

// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills
// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.
// Without this check consumers will encounter hard to track down runtime errors.
var reflectionIsSupported = typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;
function copyReflectionMetadata(to, from) {
    forwardMetadata(to, from);
    Object.getOwnPropertyNames(from.prototype).forEach(function (key) {
        forwardMetadata(to.prototype, from.prototype, key);
    });
    Object.getOwnPropertyNames(from).forEach(function (key) {
        forwardMetadata(to, from, key);
    });
}
function forwardMetadata(to, from, propertyKey) {
    var metaKeys = propertyKey
        ? Reflect.getOwnMetadataKeys(from, propertyKey)
        : Reflect.getOwnMetadataKeys(from);
    metaKeys.forEach(function (metaKey) {
        var metadata = propertyKey
            ? Reflect.getOwnMetadata(metaKey, from, propertyKey)
            : Reflect.getOwnMetadata(metaKey, from);
        if (propertyKey) {
            Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
        }
        else {
            Reflect.defineMetadata(metaKey, metadata, to);
        }
    });
}

var fakeArray = { __proto__: [] };
var hasProto = fakeArray instanceof Array;
function createDecorator(factory) {
    return function (target, key, index) {
        var Ctor = typeof target === 'function'
            ? target
            : target.constructor;
        if (!Ctor.__decorators__) {
            Ctor.__decorators__ = [];
        }
        if (typeof index !== 'number') {
            index = undefined;
        }
        Ctor.__decorators__.push(function (options) { return factory(options, key, index); });
    };
}
function mixins() {
    var Ctors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        Ctors[_i] = arguments[_i];
    }
    return Vue.extend({ mixins: Ctors });
}
function isPrimitive(value) {
    var type = typeof value;
    return value == null || (type !== 'object' && type !== 'function');
}
function warn(message) {
    if (typeof console !== 'undefined') {
        console.warn('[vue-class-component] ' + message);
    }
}

function collectDataFromConstructor(vm, Component) {
    // override _init to prevent to init as Vue instance
    var originalInit = Component.prototype._init;
    Component.prototype._init = function () {
        var _this = this;
        // proxy to actual vm
        var keys = Object.getOwnPropertyNames(vm);
        // 2.2.0 compat (props are no longer exposed as self properties)
        if (vm.$options.props) {
            for (var key in vm.$options.props) {
                if (!vm.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
        }
        keys.forEach(function (key) {
            if (key.charAt(0) !== '_') {
                Object.defineProperty(_this, key, {
                    get: function () { return vm[key]; },
                    set: function (value) { vm[key] = value; },
                    configurable: true
                });
            }
        });
    };
    // should be acquired class property values
    var data = new Component();
    // restore original _init to avoid memory leak (#209)
    Component.prototype._init = originalInit;
    // create plain data object
    var plainData = {};
    Object.keys(data).forEach(function (key) {
        if (data[key] !== undefined) {
            plainData[key] = data[key];
        }
    });
    if (process.env.NODE_ENV !== 'production') {
        if (!(Component.prototype instanceof Vue) && Object.keys(plainData).length > 0) {
            warn('Component class must inherit Vue or its descendant class ' +
                'when class property is used.');
        }
    }
    return plainData;
}

var $internalHooks = [
    'data',
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeDestroy',
    'destroyed',
    'beforeUpdate',
    'updated',
    'activated',
    'deactivated',
    'render',
    'errorCaptured',
    'serverPrefetch' // 2.6
];
function componentFactory(Component, options) {
    if (options === void 0) { options = {}; }
    options.name = options.name || Component._componentTag || Component.name;
    // prototype props.
    var proto = Component.prototype;
    Object.getOwnPropertyNames(proto).forEach(function (key) {
        if (key === 'constructor') {
            return;
        }
        // hooks
        if ($internalHooks.indexOf(key) > -1) {
            options[key] = proto[key];
            return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        if (descriptor.value !== void 0) {
            // methods
            if (typeof descriptor.value === 'function') {
                (options.methods || (options.methods = {}))[key] = descriptor.value;
            }
            else {
                // typescript decorated data
                (options.mixins || (options.mixins = [])).push({
                    data: function () {
                        var _a;
                        return _a = {}, _a[key] = descriptor.value, _a;
                    }
                });
            }
        }
        else if (descriptor.get || descriptor.set) {
            // computed properties
            (options.computed || (options.computed = {}))[key] = {
                get: descriptor.get,
                set: descriptor.set
            };
        }
    });
    (options.mixins || (options.mixins = [])).push({
        data: function () {
            return collectDataFromConstructor(this, Component);
        }
    });
    // decorate options
    var decorators = Component.__decorators__;
    if (decorators) {
        decorators.forEach(function (fn) { return fn(options); });
        delete Component.__decorators__;
    }
    // find super
    var superProto = Object.getPrototypeOf(Component.prototype);
    var Super = superProto instanceof Vue
        ? superProto.constructor
        : Vue;
    var Extended = Super.extend(options);
    forwardStaticMembers(Extended, Component, Super);
    if (reflectionIsSupported) {
        copyReflectionMetadata(Extended, Component);
    }
    return Extended;
}
var reservedPropertyNames = [
    // Unique id
    'cid',
    // Super Vue constructor
    'super',
    // Component options that will be used by the component
    'options',
    'superOptions',
    'extendOptions',
    'sealedOptions',
    // Private assets
    'component',
    'directive',
    'filter'
];
var shouldIgnore = {
    prototype: true,
    arguments: true,
    callee: true,
    caller: true
};
function forwardStaticMembers(Extended, Original, Super) {
    // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable
    Object.getOwnPropertyNames(Original).forEach(function (key) {
        // Skip the properties that should not be overwritten
        if (shouldIgnore[key]) {
            return;
        }
        // Some browsers does not allow reconfigure built-in properties
        var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);
        if (extendedDescriptor && !extendedDescriptor.configurable) {
            return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(Original, key);
        // If the user agent does not support `__proto__` or its family (IE <= 10),
        // the sub class properties may be inherited properties from the super class in TypeScript.
        // We need to exclude such properties to prevent to overwrite
        // the component options object which stored on the extended constructor (See #192).
        // If the value is a referenced value (object or function),
        // we can check equality of them and exclude it if they have the same reference.
        // If it is a primitive value, it will be forwarded for safety.
        if (!hasProto) {
            // Only `cid` is explicitly exluded from property forwarding
            // because we cannot detect whether it is a inherited property or not
            // on the no `__proto__` environment even though the property is reserved.
            if (key === 'cid') {
                return;
            }
            var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);
            if (!isPrimitive(descriptor.value) &&
                superDescriptor &&
                superDescriptor.value === descriptor.value) {
                return;
            }
        }
        // Warn if the users manually declare reserved properties
        if (process.env.NODE_ENV !== 'production' &&
            reservedPropertyNames.indexOf(key) >= 0) {
            warn("Static property name '" + key + "' declared on class '" + Original.name + "' " +
                'conflicts with reserved property name of Vue internal. ' +
                'It may cause unexpected behavior of the component. Consider renaming the property.');
        }
        Object.defineProperty(Extended, key, descriptor);
    });
}

function Component(options) {
    if (typeof options === 'function') {
        return componentFactory(options);
    }
    return function (Component) {
        return componentFactory(Component, options);
    };
}
Component.registerHooks = function registerHooks(keys) {
    $internalHooks.push.apply($internalHooks, keys);
};

/** vue-property-decorator verson 8.1.1 MIT LICENSE copyright 2018 kaorun343 */
/** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */
var reflectMetadataIsSupported = typeof Reflect !== 'undefined' && typeof Reflect.getMetadata !== 'undefined';
function applyMetadata(options, target, key) {
    if (reflectMetadataIsSupported) {
        if (!Array.isArray(options) && typeof options !== 'function' && typeof options.type === 'undefined') {
            options.type = Reflect.getMetadata('design:type', target, key);
        }
    }
}
/**
 * decorator of a prop
 * @param  options the options for the prop
 * @return PropertyDecorator | void
 */
function Prop(options) {
    if (options === void 0) { options = {}; }
    return function (target, key) {
        applyMetadata(options, target, key);
        createDecorator(function (componentOptions, k) {
            (componentOptions.props || (componentOptions.props = {}))[k] = options;
        })(target, key);
    };
}
/**
 * decorator of a watch function
 * @param  path the path or the expression to observe
 * @param  WatchOption
 * @return MethodDecorator
 */
function Watch(path, options) {
    if (options === void 0) { options = {}; }
    var _a = options.deep, deep = _a === void 0 ? false : _a, _b = options.immediate, immediate = _b === void 0 ? false : _b;
    return createDecorator(function (componentOptions, handler) {
        if (typeof componentOptions.watch !== 'object') {
            componentOptions.watch = Object.create(null);
        }
        var watch = componentOptions.watch;
        if (typeof watch[path] === 'object' && !Array.isArray(watch[path])) {
            watch[path] = [watch[path]];
        }
        else if (typeof watch[path] === 'undefined') {
            watch[path] = [];
        }
        watch[path].push({ handler: handler, deep: deep, immediate: immediate });
    });
}

var TextIcon = /** @class */ (function () {
    function TextIcon(text) {
        this.text = text;
    }
    TextIcon.prototype.toString = function () {
        return this.text;
    };
    return TextIcon;
}());

var VuetifyIcon = /** @class */ (function () {
    function VuetifyIcon(name) {
        this.name = name;
    }
    VuetifyIcon.prototype.toString = function () {
        return this.name;
    };
    return VuetifyIcon;
}());

var toolbarConfig = {
    color: 'gray',
    flat: true,
    dense: true
};

var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toolbarConfig = toolbarConfig;
        return _this;
    }
    Menu.prototype.isButtonHasTextIcon = function (button) {
        return this.getButtonIcon(button) instanceof TextIcon;
    };
    Menu.prototype.isButtonHasVuetifyIcon = function (button) {
        return this.getButtonIcon(button) instanceof VuetifyIcon;
    };
    Menu.prototype.isButtonActive = function (isActive, button) {
        return !!isActive[button.name] && isActive[button.name](button.isActiveOptions);
    };
    Menu.prototype.onButtonClick = function (commands, button) {
        return commands[button.name](button.clickOptions);
    };
    Menu.prototype.getButtonIcon = function (button) {
        return button.icons[this.$tiptapVuetify.iconsGroup];
    };
    __decorate([
        Prop({ type: Object, required: true }),
        __metadata("design:type", Editor)
    ], Menu.prototype, "editor", void 0);
    __decorate([
        Prop({
            type: Array,
            default: function () { return []; }
        }),
        __metadata("design:type", Object)
    ], Menu.prototype, "buttons", void 0);
    __decorate([
        Prop({
            type: [Array, Object],
            default: function () { return ({}); }
        }),
        __metadata("design:type", Object)
    ], Menu.prototype, "toolbarAttributes", void 0);
    Menu = __decorate([
        Component({
            components: {
                EditorMenuBar: EditorMenuBar
            }
        })
    ], Menu);
    return Menu;
}(Vue));

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

/* script */
const __vue_script__ = Menu;
/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tiptap-vuetify-editor__toolbar"},[_c('editor-menu-bar',{attrs:{"editor":_vm.editor},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var commands = ref.commands;
var isActive = ref.isActive;
return [_vm._t("default",[_c('v-toolbar',_vm._b({},'v-toolbar',Object.assign({}, _vm.toolbarConfig,
            _vm.toolbarAttributes),false),_vm._l((_vm.buttons),function(button){return _c('v-tooltip',{key:button.tooltip.toString(),attrs:{"top":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
          var on = ref.on;
return [_c('v-btn',_vm._g({class:{ 'v-btn--active': _vm.isButtonActive(isActive, button) },attrs:{"icon":""},on:{"click":function($event){return _vm.onButtonClick(commands, button)}}},on),[(_vm.isButtonHasTextIcon(button))?_c('b',[_vm._v("\n                  "+_vm._s(_vm.getButtonIcon(button))+"\n                ")]):(_vm.isButtonHasVuetifyIcon(button))?_c('v-icon',[_vm._v("\n                  "+_vm._s(_vm.getButtonIcon(button))+"\n                ")]):_vm._e()],1)]}}],null,true)},[_vm._v(" "),[_vm._v(_vm._s(button.tooltip))]],2)}),1)],{"buttons":_vm.buttons,"isActive":isActive,"commands":commands})]}}],null,true)})],1)};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var Toolbar = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

var PACKAGE_NAME = 'tiptap-vuetify';
var VuetifyVuePrototypeProperty = '$vuetify';
var EVENTS = {
    INPUT: 'input',
    INIT: 'init'
};
var PROPS = {
    VALUE: 'value',
    EXTENSIONS: 'extensions',
    TOOLBAR_ATTRIBUTES: 'toolbarAttributes',
    EDITOR_PROPERTIES: 'editorProperties',
    NATIVE_EXTENSIONS: 'nativeExtensions',
    PLACEHOLDER: 'placeholder',
    OUTPUT_FORMAT: 'outputFormat'
};

var AbstractExtensionAdapter = /** @class */ (function () {
    // extensionClass: Extension | null
    function AbstractExtensionAdapter(options, extensionClass) {
        this.options = options;
        this.extensionClass = extensionClass;
        this.extensionInstance = null;
        if (extensionClass) {
            // eslint-disable-next-line
            this.extensionInstance = new extensionClass(options);
        }
    }
    Object.defineProperty(AbstractExtensionAdapter.prototype, "isActiveOptions", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractExtensionAdapter.prototype, "clickOptions", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractExtensionAdapter;
}());

var theme = {
    defaultIconsGroup: "md" /* md */
};
var faIconsSize = 'fa-sm';

var _a, _b, _c, _d;
var icons = {
    save: (_a = {},
        _a["md" /* md */] = new VuetifyIcon('check'),
        _a["fa" /* fa */] = new VuetifyIcon('fas fa-check ' + faIconsSize),
        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-check'),
        _a),
    cancel: (_b = {},
        _b["md" /* md */] = new VuetifyIcon('link_off'),
        _b["fa" /* fa */] = new VuetifyIcon('fas fa-unlink ' + faIconsSize),
        _b["mdi" /* mdi */] = new VuetifyIcon('mdi-link-off'),
        _b),
    linkUpdate: (_c = {},
        _c["md" /* md */] = new VuetifyIcon('link'),
        _c["fa" /* fa */] = new VuetifyIcon('fas fas fa-link ' + faIconsSize),
        _c["mdi" /* mdi */] = new VuetifyIcon('mdi-link'),
        _c),
    linkAdd: (_d = {},
        _d["md" /* md */] = new VuetifyIcon('link'),
        _d["fa" /* fa */] = new VuetifyIcon('fas fa-link ' + faIconsSize),
        _d["mdi" /* mdi */] = new VuetifyIcon('mdi-link-plus'),
        _d)
};
var Link = /** @class */ (function (_super) {
    __extends(Link, _super);
    function Link(options) {
        return _super.call(this, options, Link$1) || this;
    }
    Object.defineProperty(Link.prototype, "availableButtons", {
        get: function () {
            return [
            // TODO возможно сделать кнопку в тулбаре как и остальные, а может сделать как в примере vuetify
            // но там всеранво в комманду нужно передавать параметр href
            // {
            //   name: 'link',
            //   tooltip: 'Link',
            //   icons
            // }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Link;
}(AbstractExtensionAdapter));

var en = {
    extensions: {
        Blockquote: {
            buttons: {
                blockquote: {
                    tooltip: 'Block quote'
                }
            }
        },
        Bold: {
            buttons: {
                bold: {
                    tooltip: 'Bold'
                }
            }
        },
        BulletList: {
            buttons: {
                bulletList: {
                    tooltip: 'Bulleted list'
                }
            }
        },
        Code: {
            buttons: {
                code: {
                    tooltip: 'Code'
                }
            }
        },
        CodeBlock: {
            buttons: {
                codeBlock: {
                    tooltip: 'Code block'
                }
            }
        },
        History: {
            buttons: {
                undo: {
                    tooltip: 'Undo'
                },
                redo: {
                    tooltip: 'Redo'
                }
            }
        },
        HorizontalRule: {
            buttons: {
                horizontalRule: {
                    tooltip: 'Horizontal line'
                }
            }
        },
        Italic: {
            buttons: {
                italic: {
                    tooltip: 'Italic'
                }
            }
        },
        Link: {
            bubble: {
                updateLink: 'Update Link',
                addLink: 'Add Link'
            }
        },
        OrderedList: {
            buttons: {
                orderedList: {
                    tooltip: 'Ordered list'
                }
            }
        },
        Paragraph: {
            buttons: {
                paragraph: {
                    tooltip: 'Paragraph'
                }
            }
        },
        Strike: {
            buttons: {
                strike: {
                    tooltip: 'Strike'
                }
            }
        },
        Underline: {
            buttons: {
                underline: {
                    tooltip: 'Underline'
                }
            }
        },
        Heading: {
            buttons: {
                heading: {
                    tooltip: function (args) { return args.level + ' level header'; }
                }
            }
        }
    }
};

var ru = {
    extensions: {
        Blockquote: {
            buttons: {
                blockquote: {
                    tooltip: 'Блок цитаты'
                }
            }
        },
        Bold: {
            buttons: {
                bold: {
                    tooltip: 'Жирный'
                }
            }
        },
        BulletList: {
            buttons: {
                bulletList: {
                    tooltip: 'Маркированный список'
                }
            }
        },
        Code: {
            buttons: {
                code: {
                    tooltip: 'Код'
                }
            }
        },
        CodeBlock: {
            buttons: {
                codeBlock: {
                    tooltip: 'Блок кода'
                }
            }
        },
        History: {
            buttons: {
                undo: {
                    tooltip: 'Назад'
                },
                redo: {
                    tooltip: 'Вперед'
                }
            }
        },
        HorizontalRule: {
            buttons: {
                horizontalRule: {
                    tooltip: 'Горизонтальная линия'
                }
            }
        },
        Italic: {
            buttons: {
                italic: {
                    tooltip: 'Курсивный'
                }
            }
        },
        Link: {
            bubble: {
                updateLink: 'Обновить ссылку',
                addLink: 'Добавить ссылку'
            }
        },
        OrderedList: {
            buttons: {
                orderedList: {
                    tooltip: 'Упорядоченный список'
                }
            }
        },
        Paragraph: {
            buttons: {
                paragraph: {
                    tooltip: 'Параграф'
                }
            }
        },
        Strike: {
            buttons: {
                strike: {
                    tooltip: 'Перечерктнутый'
                }
            }
        },
        Underline: {
            buttons: {
                underline: {
                    tooltip: 'Подчерктнутый'
                }
            }
        },
        Heading: {
            buttons: {
                heading: {
                    tooltip: function (_a) {
                        var level = _a.level;
                        return "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A " + level + " \u0443\u0440\u043E\u0432\u043D\u044F";
                    }
                }
            }
        }
    }
};

var es = {
    extensions: {
        Blockquote: {
            buttons: {
                blockquote: {
                    tooltip: 'Cita en bloque'
                }
            }
        },
        Bold: {
            buttons: {
                bold: {
                    tooltip: 'Texto en negrita'
                }
            }
        },
        BulletList: {
            buttons: {
                bulletList: {
                    tooltip: 'Lista no ordenada'
                }
            }
        },
        Code: {
            buttons: {
                code: {
                    tooltip: 'Código'
                }
            }
        },
        CodeBlock: {
            buttons: {
                codeBlock: {
                    tooltip: 'Bloque de código'
                }
            }
        },
        History: {
            buttons: {
                undo: {
                    tooltip: 'Deshacer'
                },
                redo: {
                    tooltip: 'Rehacer'
                }
            }
        },
        HorizontalRule: {
            buttons: {
                horizontalRule: {
                    tooltip: 'Línea horizontal'
                }
            }
        },
        Italic: {
            buttons: {
                italic: {
                    tooltip: 'Texto en cursiva'
                }
            }
        },
        Link: {
            bubble: {
                updateLink: 'Actualizar enlace',
                addLink: 'Añadir enlace'
            }
        },
        OrderedList: {
            buttons: {
                orderedList: {
                    tooltip: 'Lista ordenada'
                }
            }
        },
        Paragraph: {
            buttons: {
                paragraph: {
                    tooltip: 'Párrafo'
                }
            }
        },
        Strike: {
            buttons: {
                strike: {
                    tooltip: 'Tachar texto'
                }
            }
        },
        Underline: {
            buttons: {
                underline: {
                    tooltip: 'Subrayar texto'
                }
            }
        },
        Heading: {
            buttons: {
                heading: {
                    tooltip: function (args) { return "Nivel de encabezado " + args.level; }
                }
            }
        }
    }
};

var pl = {
    extensions: {
        Blockquote: {
            buttons: {
                blockquote: {
                    tooltip: 'Blok cytatu'
                }
            }
        },
        Bold: {
            buttons: {
                bold: {
                    tooltip: 'Pogrubienie'
                }
            }
        },
        BulletList: {
            buttons: {
                bulletList: {
                    tooltip: 'Lista punktów'
                }
            }
        },
        Code: {
            buttons: {
                code: {
                    tooltip: 'Kod'
                }
            }
        },
        CodeBlock: {
            buttons: {
                codeBlock: {
                    tooltip: 'Blok kodu'
                }
            }
        },
        History: {
            buttons: {
                undo: {
                    tooltip: 'Cofnij'
                },
                redo: {
                    tooltip: 'Ponów'
                }
            }
        },
        HorizontalRule: {
            buttons: {
                horizontalRule: {
                    tooltip: 'Linia pozioma'
                }
            }
        },
        Italic: {
            buttons: {
                italic: {
                    tooltip: 'Kursywa'
                }
            }
        },
        Link: {
            bubble: {
                updateLink: 'Zaktualizuj link',
                addLink: 'Dodaj Link'
            }
        },
        OrderedList: {
            buttons: {
                orderedList: {
                    tooltip: 'Lista numerowana'
                }
            }
        },
        Paragraph: {
            buttons: {
                paragraph: {
                    tooltip: 'Paragraf'
                }
            }
        },
        Strike: {
            buttons: {
                strike: {
                    tooltip: 'Przekreślenie'
                }
            }
        },
        Underline: {
            buttons: {
                underline: {
                    tooltip: 'Podkreślenie'
                }
            }
        },
        Heading: {
            buttons: {
                heading: {
                    tooltip: function (args) { return args.level + ' nagłówek'; }
                }
            }
        }
    }
};

var fr = {
    extensions: {
        Blockquote: {
            buttons: {
                blockquote: {
                    tooltip: 'Bloc de citation'
                }
            }
        },
        Bold: {
            buttons: {
                bold: {
                    tooltip: 'Gras'
                }
            }
        },
        BulletList: {
            buttons: {
                bulletList: {
                    tooltip: 'Liste à puce'
                }
            }
        },
        Code: {
            buttons: {
                code: {
                    tooltip: 'Code'
                }
            }
        },
        CodeBlock: {
            buttons: {
                codeBlock: {
                    tooltip: 'Bloc de code'
                }
            }
        },
        History: {
            buttons: {
                undo: {
                    tooltip: 'Annuler'
                },
                redo: {
                    tooltip: 'Rétablir'
                }
            }
        },
        HorizontalRule: {
            buttons: {
                horizontalRule: {
                    tooltip: 'Ligne horizontale'
                }
            }
        },
        Italic: {
            buttons: {
                italic: {
                    tooltip: 'Italique'
                }
            }
        },
        Link: {
            bubble: {
                updateLink: 'Mise à jour du lien',
                addLink: 'Ajouter un lien'
            }
        },
        OrderedList: {
            buttons: {
                orderedList: {
                    tooltip: 'Liste ordonnée'
                }
            }
        },
        Paragraph: {
            buttons: {
                paragraph: {
                    tooltip: 'Paragraphe'
                }
            }
        },
        Strike: {
            buttons: {
                strike: {
                    tooltip: 'Barré'
                }
            }
        },
        Underline: {
            buttons: {
                underline: {
                    tooltip: 'Souligné'
                }
            }
        },
        Heading: {
            buttons: {
                heading: {
                    tooltip: function (args) { return args.level + ' niveau de titre'; }
                }
            }
        }
    }
};

var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger() {
    }
    ConsoleLogger.prototype.warn = function (msg) {
        console.warn(PACKAGE_NAME + ": " + msg);
    };
    return ConsoleLogger;
}());
var ConsoleLogger$1 = new ConsoleLogger();

var defaultLanguage = 'en';
var dictionary = {
    en: en,
    ru: ru,
    es: es,
    pl: pl,
    fr: fr
};
function getCurrentLang() {
    return Vue.prototype.tiptapVuetifyPlugin.vuetifyLang || 'defaultLanguage';
}
function getMsg(path, args) {
    var currentLang = getCurrentLang();
    if (!dictionary[currentLang]) {
        currentLang = defaultLanguage;
        ConsoleLogger$1.warn("The current language \"" + currentLang + "\" is not yet available. Using language \"" + defaultLanguage + "\" by default.");
    }
    var dictionaryByLang = dictionary[currentLang];
    var target = path.split('.').reduce(function (prev, curr) {
        return prev[curr];
    }, dictionaryByLang);
    if (target instanceof Function) {
        return target(args);
    }
    return target;
}

var namespace = '$i18n';
var I18nMixin = /** @class */ (function (_super) {
    __extends(I18nMixin, _super);
    function I18nMixin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(I18nMixin.prototype, namespace, {
        get: function () {
            return {
                getMsg: getMsg
            };
        },
        enumerable: true,
        configurable: true
    });
    I18nMixin = __decorate([
        Component
    ], I18nMixin);
    return I18nMixin;
}(Vue));

var Menu$1 = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.linkUrl = null;
        _this.linkMenuIsActive = false;
        return _this;
    }
    Menu.prototype.getMenuY = function (menu) {
        // высота всей страницы - высота окна - сколько страницу прокрученно от верха
        var diff = document.documentElement.scrollHeight - window.innerHeight - window.scrollY;
        // bottom позиция относитель низа окна
        var bottomRelatedToWindow = menu.bottom - diff;
        // top позиция
        return window.innerHeight - bottomRelatedToWindow;
    };
    Menu.prototype.getIconByKey = function (key) {
        return icons[key][this.$tiptapVuetify.iconsGroup];
    };
    Menu.prototype.showLinkMenu = function (attrs) {
        var _this = this;
        this.linkUrl = attrs.href;
        this.linkMenuIsActive = true;
        this.$nextTick(function () {
            // @ts-ignore
            _this.$refs.linkInput.focus();
        });
    };
    Menu.prototype.hideLinkMenu = function () {
        this.linkUrl = null;
        this.linkMenuIsActive = false;
    };
    Menu.prototype.setLinkUrl = function (command, url) {
        command({ href: url });
        this.hideLinkMenu();
        this.editor.focus();
    };
    __decorate([
        Prop({ type: Object, required: true }),
        __metadata("design:type", Editor)
    ], Menu.prototype, "editor", void 0);
    Menu = __decorate([
        Component({
            components: {
                EditorMenuBubble: EditorMenuBubble
            }
        })
    ], Menu);
    return Menu;
}(mixins(I18nMixin)));

/* script */
const __vue_script__$1 = Menu$1;
/* template */
var __vue_render__$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('editor-menu-bubble',{staticClass:"tiptap-vuetify-editor__menububble",attrs:{"editor":_vm.editor},on:{"hide":_vm.hideLinkMenu},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var commands = ref.commands;
var isActive = ref.isActive;
var getMarkAttrs = ref.getMarkAttrs;
var menu = ref.menu;
return [_c('v-tooltip',{attrs:{"value":menu.isActive,"position-x":menu.left,"position-y":_vm.getMenuY(menu),"absolute":"","top":""}},[_c('div',[(_vm.linkMenuIsActive)?_c('form',{staticClass:"tiptap-vuetify-editor__menububble-form",on:{"submit":function($event){$event.preventDefault();return _vm.setLinkUrl(commands.link, _vm.linkUrl)}}},[_c('v-text-field',{ref:"linkInput",attrs:{"placeholder":"Link","hide-details":"","solo":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.hideLinkMenu($event)}},model:{value:(_vm.linkUrl),callback:function ($$v) {_vm.linkUrl=$$v;},expression:"linkUrl"}}),_vm._v(" "),_c('v-btn',{attrs:{"color":"success","type":"submit","icon":""}},[_c('v-icon',[_vm._v("\n              "+_vm._s(_vm.getIconByKey('save'))+"\n            ")])],1),_vm._v(" "),_c('v-btn',{attrs:{"color":"error","icon":""},on:{"click":function($event){return _vm.setLinkUrl(commands.link, null)}}},[_c('v-icon',[_vm._v("\n              "+_vm._s(_vm.getIconByKey('cancel'))+"\n            ")])],1)],1):_c('v-btn',{class:{ 'v-btn--active': isActive.link() },attrs:{"color":"primary","small":""},on:{"click":function($event){_vm.showLinkMenu(getMarkAttrs('link'));}}},[_c('v-icon',{attrs:{"left":""}},[_vm._v("\n            "+_vm._s(_vm.getIconByKey(
              isActive.link() ? 'linkUpdate' : 'linkAdd'
            ))+"\n          ")]),_vm._v("\n\n          "+_vm._s(isActive.link() ? _vm.$i18n.getMsg('extensions.Link.bubble.updateLink') : _vm.$i18n.getMsg('extensions.Link.bubble.addLink'))+"\n        ")],1)],1)])]}}])})};
var __vue_staticRenderFns__$1 = [];

  /* style */
  const __vue_inject_styles__$1 = undefined;
  /* scoped */
  const __vue_scope_id__$1 = undefined;
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var Bubble = normalizeComponent_1(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    undefined,
    undefined
  );

var TiptapVuetify = /** @class */ (function (_super) {
    __extends(TiptapVuetify, _super);
    function TiptapVuetify() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.PROPS = PROPS;
        _this.editor = null;
        _this.buttons = [];
        _this.emitAfterOnUpdate = false;
        _this.editorExtensions = [];
        return _this;
    }
    Object.defineProperty(TiptapVuetify.prototype, "hasLink", {
        get: function () {
            return this[PROPS.EXTENSIONS].some(function (adapter) { return adapter instanceof Link; });
        },
        enumerable: true,
        configurable: true
    });
    TiptapVuetify.prototype.onValueChange = function (val) {
        if (this.emitAfterOnUpdate) {
            this.emitAfterOnUpdate = false;
            return;
        }
        if (this.editor)
            this.editor.setContent(val);
    };
    TiptapVuetify.prototype.mounted = function () {
        var _this = this;
        var extensionsInstances = [];
        this[PROPS.EXTENSIONS].forEach(function (adapter) {
            var _h;
            (_h = _this.buttons).push.apply(_h, __spread(adapter.availableButtons));
            if (adapter.extensionInstance) {
                extensionsInstances.push(adapter.extensionInstance);
            }
        });
        var extensions = __spread(this[PROPS.NATIVE_EXTENSIONS], extensionsInstances, [
            // TODO ONLY FOR TEST
            new Placeholder({
                emptyNodeClass: 'tiptap-vuetify-editor__paragraph--is-empty',
                emptyNodeText: this[PROPS.PLACEHOLDER],
                showOnlyWhenEditable: true
            })
        ]);
        this.editor = new Editor(__assign({ extensions: extensions }, this[PROPS.EDITOR_PROPERTIES], { content: this[PROPS.VALUE], onUpdate: this.onUpdate }));
        this.$emit(EVENTS.INIT, {
            editor: this.editor
        });
    };
    TiptapVuetify.prototype.onUpdate = function (info) {
        this.emitAfterOnUpdate = true;
        var output;
        if (this[PROPS.OUTPUT_FORMAT] === 'html') {
            output = info.getHTML();
        }
        else {
            output = JSON.stringify(info.getJSON());
        }
        this.$emit(EVENTS.INPUT, output, info);
    };
    TiptapVuetify.prototype.beforeDestroy = function () {
        if (this.editor)
            this.editor.destroy();
    };
    var _a, _b, _c, _d, _e, _f, _g;
    _a = PROPS.VALUE, _b = PROPS.EXTENSIONS, _c = PROPS.PLACEHOLDER, _d = PROPS.OUTPUT_FORMAT, _e = PROPS.TOOLBAR_ATTRIBUTES, _f = PROPS.EDITOR_PROPERTIES, _g = PROPS.NATIVE_EXTENSIONS;
    __decorate([
        Prop({ type: String, default: '' }),
        __metadata("design:type", String)
    ], TiptapVuetify.prototype, _a, void 0);
    __decorate([
        Prop({ type: Array, default: function () { return []; } }),
        __metadata("design:type", Object)
    ], TiptapVuetify.prototype, _b, void 0);
    __decorate([
        Prop({ type: String }),
        __metadata("design:type", String)
    ], TiptapVuetify.prototype, _c, void 0);
    __decorate([
        Prop({ type: String, default: 'html' }),
        __metadata("design:type", String)
    ], TiptapVuetify.prototype, _d, void 0);
    __decorate([
        Prop({
            type: [Array, Object],
            default: function () { return ({}); }
        }),
        __metadata("design:type", Object)
    ], TiptapVuetify.prototype, _e, void 0);
    __decorate([
        Prop({
            type: Object,
            default: function () { return ({}); }
        }),
        __metadata("design:type", Object)
    ], TiptapVuetify.prototype, _f, void 0);
    __decorate([
        Prop({
            type: Array,
            default: function () { return []; }
        }),
        __metadata("design:type", Object)
    ], TiptapVuetify.prototype, _g, void 0);
    __decorate([
        Watch('value'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TiptapVuetify.prototype, "onValueChange", null);
    TiptapVuetify = __decorate([
        Component({
            components: {
                Bubble: Bubble,
                EditorContent: EditorContent,
                Toolbar: Toolbar
            }
        })
    ], TiptapVuetify);
    return TiptapVuetify;
}(Vue));

/* script */
const __vue_script__$2 = TiptapVuetify;
/* template */
var __vue_render__$2 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.editor)?_c('div',{staticClass:"tiptap-vuetify-editor"},[(_vm.hasLink)?_c('bubble',{attrs:{"editor":_vm.editor}}):_vm._e(),_vm._v(" "),_c('v-card',[_vm._t("toolbar-before"),_vm._v(" "),_c('toolbar',{attrs:{"editor":_vm.editor,"buttons":_vm.buttons,"toolbar-attributes":_vm.$props[_vm.PROPS.TOOLBAR_ATTRIBUTES]},scopedSlots:_vm._u([(_vm.$scopedSlots.toolbar)?{key:"default",fn:function(scopedSlot){return [_vm._t("toolbar",null,null,scopedSlot)]}}:null],null,true)}),_vm._v(" "),_vm._t("toolbar-after"),_vm._v(" "),_c('div',{staticClass:"tiptap-vuetify-editor__content"},[_c('editor-content',{attrs:{"editor":_vm.editor}})],1),_vm._v(" "),_vm._t("footer")],2)],1):_vm._e()};
var __vue_staticRenderFns__$2 = [];

  /* style */
  const __vue_inject_styles__$2 = undefined;
  /* scoped */
  const __vue_scope_id__$2 = undefined;
  /* module identifier */
  const __vue_module_identifier__$2 = undefined;
  /* functional template */
  const __vue_is_functional_template__$2 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var TiptapVuetify$1 = normalizeComponent_1(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    undefined,
    undefined
  );

var I18nText = /** @class */ (function () {
    function I18nText(path, args) {
        this.text = getMsg(path, args);
    }
    I18nText.prototype.toString = function () {
        return this.text;
    };
    return I18nText;
}());

var Heading = /** @class */ (function (_super) {
    __extends(Heading, _super);
    function Heading(options) {
        return _super.call(this, options, Heading$1) || this;
    }
    Object.defineProperty(Heading.prototype, "availableButtons", {
        get: function () {
            return this.options.levels.map(function (level) {
                var _a;
                return ({
                    name: 'heading',
                    tooltip: new I18nText('extensions.Heading.buttons.heading.tooltip', { level: level }),
                    icons: (_a = {},
                        _a["md" /* md */] = new TextIcon('H' + level),
                        _a["fa" /* fa */] = new TextIcon('H' + level),
                        _a["mdi" /* mdi */] = new TextIcon('H' + level),
                        _a),
                    clickOptions: { level: level },
                    isActiveOptions: { level: level }
                });
            });
        },
        enumerable: true,
        configurable: true
    });
    return Heading;
}(AbstractExtensionAdapter));

var Bold = /** @class */ (function (_super) {
    __extends(Bold, _super);
    function Bold(options) {
        return _super.call(this, options, Bold$1) || this;
    }
    Object.defineProperty(Bold.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'bold',
                    tooltip: new I18nText('extensions.Bold.buttons.bold.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_bold'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-bold ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-bold'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Bold;
}(AbstractExtensionAdapter));

var Italic = /** @class */ (function (_super) {
    __extends(Italic, _super);
    function Italic(options) {
        var _this = _super.call(this, options, Italic$1) || this;
        _this.name = 'italic';
        return _this;
    }
    Object.defineProperty(Italic.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: this.name,
                    tooltip: new I18nText('extensions.Italic.buttons.italic.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_italic'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-italic ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-italic'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Italic;
}(AbstractExtensionAdapter));

var Strike = /** @class */ (function (_super) {
    __extends(Strike, _super);
    function Strike(options) {
        return _super.call(this, options, Strike$1) || this;
    }
    Object.defineProperty(Strike.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'strike',
                    tooltip: new I18nText('extensions.Strike.buttons.strike.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_strikethrough'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-strikethrough ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-strikethrough'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Strike;
}(AbstractExtensionAdapter));

var Underline = /** @class */ (function (_super) {
    __extends(Underline, _super);
    function Underline(options) {
        return _super.call(this, options, Underline$1) || this;
    }
    Object.defineProperty(Underline.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'underline',
                    tooltip: new I18nText('extensions.Underline.buttons.underline.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_underline'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-underline ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-underline'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Underline;
}(AbstractExtensionAdapter));

// TODO текст перед / после иконки. Сделать через массив: [new VuetifyIcon('code'), new TextForIcon('text')]
var Code = /** @class */ (function (_super) {
    __extends(Code, _super);
    function Code(options) {
        var _this = _super.call(this, options, Code$1) || this;
        _this.name = 'code';
        return _this;
    }
    Object.defineProperty(Code.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: this.name,
                    tooltip: new I18nText('extensions.Code.buttons.code.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('code'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-code ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-code-tags'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Code;
}(AbstractExtensionAdapter));

// TODO текст перед / после иконки. Сделать через массив: [new VuetifyIcon('code'), new TextForIcon('text')]
var CodeBlock = /** @class */ (function (_super) {
    __extends(CodeBlock, _super);
    function CodeBlock(options) {
        var _this = _super.call(this, options, CodeBlock$1) || this;
        _this.name = 'code_block';
        return _this;
    }
    Object.defineProperty(CodeBlock.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: this.name,
                    tooltip: new I18nText('extensions.CodeBlock.buttons.codeBlock.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('code'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-code ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-code-tags'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return CodeBlock;
}(AbstractExtensionAdapter));

var Paragraph = /** @class */ (function (_super) {
    __extends(Paragraph, _super);
    function Paragraph(options) {
        return _super.call(this, options, null) || this;
    }
    Object.defineProperty(Paragraph.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'paragraph',
                    tooltip: new I18nText('extensions.Paragraph.buttons.paragraph.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_textdirection_l_to_r'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-paragraph ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-paragraph'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Paragraph;
}(AbstractExtensionAdapter));

var BulletList = /** @class */ (function (_super) {
    __extends(BulletList, _super);
    function BulletList(options) {
        var _this = _super.call(this, options, BulletList$1) || this;
        _this.name = 'bullet_list';
        return _this;
    }
    Object.defineProperty(BulletList.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: this.name,
                    tooltip: new I18nText('extensions.BulletList.buttons.bulletList.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_list_bulleted'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-list-ul ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-list-bulleted'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return BulletList;
}(AbstractExtensionAdapter));

var OrderedList = /** @class */ (function (_super) {
    __extends(OrderedList, _super);
    function OrderedList(options) {
        return _super.call(this, options, OrderedList$1) || this;
    }
    Object.defineProperty(OrderedList.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'ordered_list',
                    tooltip: new I18nText('extensions.OrderedList.buttons.orderedList.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_list_numbered'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-list-ol ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-list-numbered'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return OrderedList;
}(AbstractExtensionAdapter));

var ListItem = /** @class */ (function (_super) {
    __extends(ListItem, _super);
    function ListItem(options) {
        return _super.call(this, options, ListItem$1) || this;
    }
    Object.defineProperty(ListItem.prototype, "availableButtons", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    return ListItem;
}(AbstractExtensionAdapter));

var Blockquote = /** @class */ (function (_super) {
    __extends(Blockquote, _super);
    function Blockquote(options) {
        return _super.call(this, options, Blockquote$1) || this;
    }
    Object.defineProperty(Blockquote.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: 'blockquote',
                    tooltip: new I18nText('extensions.Blockquote.buttons.blockquote.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('format_quote'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-quote-right ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-format-quote-close'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return Blockquote;
}(AbstractExtensionAdapter));

var HardBreak = /** @class */ (function (_super) {
    __extends(HardBreak, _super);
    function HardBreak(options) {
        var _this = _super.call(this, options, HardBreak$1) || this;
        _this.name = null;
        return _this;
    }
    Object.defineProperty(HardBreak.prototype, "availableButtons", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    return HardBreak;
}(AbstractExtensionAdapter));

var HorizontalRule = /** @class */ (function (_super) {
    __extends(HorizontalRule, _super);
    function HorizontalRule(options) {
        var _this = _super.call(this, options, HorizontalRule$1) || this;
        _this.name = 'horizontal_rule';
        return _this;
    }
    Object.defineProperty(HorizontalRule.prototype, "availableButtons", {
        get: function () {
            var _a;
            return [
                {
                    name: this.name,
                    tooltip: new I18nText('extensions.HorizontalRule.buttons.horizontalRule.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new TextIcon('—'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-minus ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-minus'),
                        _a)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return HorizontalRule;
}(AbstractExtensionAdapter));

var History = /** @class */ (function (_super) {
    __extends(History, _super);
    function History(options) {
        return _super.call(this, options, History$1) || this;
    }
    Object.defineProperty(History.prototype, "availableButtons", {
        get: function () {
            var _a, _b;
            return [
                {
                    name: 'undo',
                    tooltip: new I18nText('extensions.History.buttons.undo.tooltip'),
                    icons: (_a = {},
                        _a["md" /* md */] = new VuetifyIcon('undo'),
                        _a["fa" /* fa */] = new VuetifyIcon('fas fa-undo ' + faIconsSize),
                        _a["mdi" /* mdi */] = new VuetifyIcon('mdi-undo'),
                        _a)
                },
                {
                    name: 'redo',
                    tooltip: new I18nText('extensions.History.buttons.redo.tooltip'),
                    icons: (_b = {},
                        _b["md" /* md */] = new VuetifyIcon('redo'),
                        _b["fa" /* fa */] = new VuetifyIcon('fas fa-redo ' + faIconsSize),
                        _b["mdi" /* mdi */] = new VuetifyIcon('mdi-redo'),
                        _b)
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return History;
}(AbstractExtensionAdapter));

// import Heading from '~/extensionAdapters/Heading'

// дефолтный экспорт не подходит и это плохая практика:
// It is bad practice to mix default and named exports in the same module, though it is allowed by the specification.
var TiptapVuetifyPlugin = new (/** @class */ (function () {
    function Plugin() {
        this.installed = false;
    }
    Object.defineProperty(Plugin.prototype, "vuetify", {
        get: function () {
            return this.currentVuePrototype[VuetifyVuePrototypeProperty];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Plugin.prototype, "vuetifyLang", {
        get: function () {
            var vuetify = this.vuetify;
            // TODO optional chaining
            return (vuetify && vuetify.lang && vuetify.lang.current) || null;
        },
        enumerable: true,
        configurable: true
    });
    Plugin.prototype.install = function (VueFuncConstructor, options) {
        if (options === void 0) { options = {}; }
        var 
        // TODO default language (походу в ts так нельзя)
        _a = options.iconsGroup, 
        // TODO default language (походу в ts так нельзя)
        iconsGroup = _a === void 0 ? theme.defaultIconsGroup : _a;
        VueFuncConstructor.prototype.$tiptapVuetify = {
            iconsGroup: iconsGroup
        };
        VueFuncConstructor.prototype.tiptapVuetifyPlugin = TiptapVuetifyPlugin;
        this.currentVueFuncConstructor = VueFuncConstructor;
        this.currentVuePrototype = VueFuncConstructor.prototype;
        this.checkVuetifyLang();
        this.installed = true;
    };
    Plugin.prototype.checkVuetifyLang = function () {
        if (!this.vuetifyLang) {
            ConsoleLogger$1.warn("Could not determine language, because Vue.prototype." + VuetifyVuePrototypeProperty +
                ("is not available. Using language \"" + defaultLanguage + "\" by default."));
        }
    };
    return Plugin;
}()))();

export { Blockquote, Bold, BulletList, Code, CodeBlock, HardBreak, Heading, History, HorizontalRule, Italic, Link, ListItem, OrderedList, Paragraph, Strike, TiptapVuetify$1 as TiptapVuetify, TiptapVuetifyPlugin, Underline };
